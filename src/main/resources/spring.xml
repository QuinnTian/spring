<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="
http://www.springframework.org/schema/beans	      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context		   http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    <!-- id 表示你这个组件的名字，class表示组件类 -->
    <bean id="hello" class="Hello"></bean>
    <!--单独用name做标识符-->
    <bean name="test3" class="Test3"></bean>
    <bean id="test4" name="ceshi4" class="Test4"></bean>
    <!--下面是依赖注入-->
    <!--第一种：构造器注入有三种，
    1.根据索引注入
    2.根据名称注入
    3.根据类型注入
    -->
    <!--构造器根据索引注入-->
    <bean name="byIndex" class="com.spring.dependencyinject.byconstructor.ByIndex">
        <constructor-arg index="0" value="1"/>
        <constructor-arg index="1" value="2"/>
    </bean>
    <!--构造器根据类型注入-->
    <bean name="byName" class="com.spring.dependencyinject.byconstructor.ByName">
        <constructor-arg name="message" value="1"/>
        <constructor-arg name="index" value="2"/>
    </bean>
    <!--构造器根据名称注入-->
    <bean name="byType" class="com.spring.dependencyinject.byconstructor.ByType">
        <constructor-arg type="java.lang.String" value="1"/>
        <constructor-arg type="int" value="2"/>
    </bean>
    <!--静态工厂注入
    结合上面的构造器注入：
    构造器根据索引、根据类型、根据名称注入+静态工厂
    -->
    <!--静态工厂+索引-->
    <bean id="byStaticFactoryAndIndex" class="com.spring.dependencyinject.bystaticfactory.DependencyByStaticFactory"
                 factory-method="newInstance">
    <constructor-arg index="0" value="1"/>
    <constructor-arg index="1" value="2"/>
    </bean>
    <bean id="byStaticFactoryAndbyName" class="com.spring.dependencyinject.bystaticfactory.DependencyByStaticFactory"
          factory-method="newInstance">
        <constructor-arg index="0" value="1"/>
        <constructor-arg index="1" value="2"/>
    </bean>
    <bean id="byStaticFactoryAndbyType" class="com.spring.dependencyinject.bystaticfactory.DependencyByStaticFactory"
          factory-method="newInstance">
        <constructor-arg index="0" value="1"/>
        <constructor-arg index="1" value="2"/>
    </bean>
    <!--注入之setter注入-->
    <bean id="bySetter" class="com.spring.dependencyinject.bysetter.BySetter">
        <property name="message" value="这是setter注入"></property>
        <property name="index" value="1"></property>
    </bean>
    <!--注入beanID,此处注入的时ID值，而不是实际的value值-->
    <bean id="beanId" class="java.lang.String">
        <constructor-arg index="0" value="test"></constructor-arg>
    </bean>
    <bean id="idRefBean" class="com.spring.dependencyinject.injectbeanid.IdRefTestBean">
        <property name="id"><idref local="beanId"></idref> </property>
<!--        <property name="id"><idref local="beanId"></idref> </property>-->
    </bean>
    <!--注入List集合类型-->
    <bean id="injectList" class="com.spring.dependencyinject.injectlist.ListTestBean">
        <property name="values">
            <list>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </list>
        </property>
    </bean>
    <!--注入Set集合类型-->
    <bean id="injectSet" class="com.spring.dependencyinject.injectSet.SetTestBean">
        <property name="values">
            <set>
                <value>1</value>
                <value>2</value>
                <value>3</value>
                <value>4</value>
            </set>
        </property>
    </bean>
    <!--注入数组-->
    <bean id="injectArray" class="com.spring.dependencyinject.injectArray.ArrayTestBean">
        <property name="array">
            <array>
                <value>1</value>
                <value>2</value>
            </array>
        </property>
        <!--二维数组注入-->
        <property name="array2">
            <array>
                <array>
                    <value>1</value>
                    <value>2</value>
                </array>
                <array>
                    <value>1</value>
                    <value>2</value>
                </array>
            </array>
        </property>
    </bean>
    <!--注入map类型-->
    <bean id="injectMap" class="com.spring.dependencyinject.injectMap.MapTestBean">
        <property name="values">
            <map key-type="java.lang.String" value-type="java.lang.String">
                <entry>
                    <key><value>1</value></key>
                    <value>值1</value>
                </entry>
            </map>
        </property>
    </bean>
    <!--注入Properties-->
    <bean id="injectProperties" class="com.spring.dependencyinject.injectProperties.PropertiesTestBean">
        <property name="values">
            <props value-type="int" merge="default">
                <prop key="1">1</prop>
                <prop key="2">2</prop>
            </props>
        </property>
    </bean>
    <bean id="injectProperties2" class="com.spring.dependencyinject.injectProperties.PropertiesTestBean">
        <property name="values">
                <value>
                    1=11
                    2=22
                    3=33,
                    4=44;
                </value>
        </property>
    </bean>
    <!--引用其他类型的Bean-->
    <!--定义依赖的Bean-->
    <bean id="relyBean" class="com.spring.dependencyinject.refOtherBean.byConstructorAndSetter.HelloImpl"></bean>
    <!--通过构造器注入-->
    <bean id="bean1" class="com.spring.dependencyinject.refOtherBean.byConstructorAndSetter.HelloApiDecorator">
        <constructor-arg index="0" ref="relyBean"/>
    </bean>
<!--    <bean id="bean3" class="com.spring.dependencyinject.refOtherBean.byConstructorAndSetter.HelloApiDecorator">-->
<!--        <constructor-arg index="0" ><ref bean="relyBean"></ref></constructor-arg>-->
<!--    </bean>-->
    <!--通过setter注入-->
    <bean id="bean2" class="com.spring.dependencyinject.refOtherBean.byConstructorAndSetter.HelloApiDecorator">
        <property name="helloApi"><ref bean="relyBean"/></property>
    </bean>
    <bean id="bean4" class="com.spring.dependencyinject.refOtherBean.byConstructorAndSetter.HelloApiDecorator">
        <property name="helloApi" ref="relyBean"></property>
    </bean>
    <!--通过ref-local和ref-parents-->
    
</beans>
